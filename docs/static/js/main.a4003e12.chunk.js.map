{"version":3,"sources":["logo.svg","Common/Tabs.js","Profile/ProjectCard.js","Profile/ProfileCard.js","Profile/Profile.js","Common/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tabs","tabs","className","map","name","href","ProjectCard","description","subHeading","defaultProps","ProfileCard","avatar_url","login","src","Profile","props","userName","useParams","useState","status","data","userProfile","setUserProfile","useEffect","a","fetch","response","json","user","console","log","Header","App","exact","path","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,kC,yNCgB5BC,EAdF,SAAC,GAAiB,IAAD,IAAfC,YAAe,MAAR,GAAQ,EAC5B,OACE,6BACE,yBAAKC,UAAU,eAEXD,EAAKE,KAAI,gBAAEC,EAAF,EAAEA,KAAF,OACP,uBAAGC,KAAK,KAAKD,SCNnBE,EAAc,SAAC,GAAqC,IAApCF,EAAmC,EAAnCA,KAAMG,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,WACvC,OAAQ,yBAAKN,UAAU,mCACtB,4BACE,2BAAIE,IAEL,uBAAGF,UAAU,8CAA8CM,GAC3D,uBAAGN,UAAU,kBAAkBK,KAInCD,EAAYG,aAAe,CACzBL,KAAM,QACNI,WAAY,gDACZD,YAAa,oFAGAD,QCLAI,EAXK,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,WAAYP,EAAiB,EAAjBA,KAAMQ,EAAW,EAAXA,MACtC,OACE,yBAAKV,UAAU,+BACb,yBAAKA,UAAU,oBAAoBW,IAAKF,IACxC,wBAAIT,UAAU,kBAAkBE,GAChC,wBAAIF,UAAU,4CAA4CU,GAC1D,4BAAQV,UAAU,4CAAlB,mBC4CSY,EA5CC,SAACC,GAAW,IACpBC,EAAaC,cAAbD,SADmB,EAEaE,mBAAS,CAACC,OAAQ,UAAWC,KAAM,OAFhD,mBAElBC,EAFkB,KAELC,EAFK,KAIzBC,oBAAS,sBAAC,8BAAAC,EAAA,+EAEeC,MAAM,gCAAD,OAAiCT,IAFrD,cAEFU,EAFE,gBAGWA,EAASC,OAHpB,OAGFC,EAHE,OAINC,QAAQC,IAAI,OAAQF,GACpBN,EAAe,CAACH,OAAQ,UAAWC,KAAMQ,IALnC,kDAONN,EAAe,CAACH,OAAQ,QAASC,KAAK,EAAD,KAP/B,0DASP,CAACJ,IAEJ,OACE,yBAAKd,UAAU,8BAEY,YAAvBmB,EAAYF,OAER,yBAAKjB,UAAU,kBACb,yBAAKA,UAAU,4CACb,kBAAC,EAAgBmB,EAAYD,OAE/B,yBAAKlB,UAAU,4CACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACED,KAbL,CAAC,CAACG,KAAM,YAAa,CAACA,KAAM,gBAAiB,CAACA,KAAM,eAejD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SAIJ,4CCnCC2B,G,0CARA,WACb,OACE,yBAAK7B,UAAU,YACb,yBAAKA,UAAU,kBAAf,SCyBS8B,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,qBAAsBC,SAAU,kBAAC,EAAD,WCXtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.a4003e12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Tabs = ({tabs = []}) => {\n  return (\n    <div>\n      <div className=\"c-tabs--nav\">\n        {\n          tabs.map(({name})=> (\n            <a href=\"#\">{name}</a>\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\n\nconst ProjectCard = ({name, description, subHeading}) => {\n  return (<div className=\"u-cushion--10x-v c-project-card\">\n   <h3>\n     <a>{name}</a>\n   </h3>\n    <p className=\"c-project-card__sub_heading u-spacer--2x-v\">{subHeading}</p>\n    <p className=\"u-spacer--4x-v\">{description}</p>\n  </div>)\n};\n\nProjectCard.defaultProps = {\n  name: 'vivek',\n  subHeading: 'Forked from MyOutDeskLLC/node-browser-history',\n  description: 'This module is aimed to get all browser history from some common web browsers.\\n'\n}\n\nexport default ProjectCard;","import React from 'react';\n\nconst ProfileCard = ({avatar_url, name, login}) => {\n  return (\n    <div className=\"u-spacer--5x c-profile-card\">\n      <img className=\"c-profile--avatar\" src={avatar_url} />\n      <h2 className=\"u-spacer--4x-v\">{name}</h2>\n      <h3 className=\"u-text__gray c-profile-card__sub_heading\">{login}</h3>\n      <button className=\"c-profile-card__large_btn u-spacer--4x-v\"> Edit Profile</button>\n    </div>\n  );\n}\n\nexport default ProfileCard;\n","import React, {useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\n\n\nimport Tabs from '../Common/Tabs';\nimport ProjectCard from \"./ProjectCard\";\nimport ProfileCard from './ProfileCard';\n\nconst Profile = (props) => {\n  let { userName } = useParams();\n  const [userProfile, setUserProfile] = useState({status: 'PENDING', data: null});\n\n  useEffect(async () => {\n    try {\n      let response = await fetch(`https://api.github.com/users/${userName}`);\n      let user = await response.json();\n      console.log('user', user);\n      setUserProfile({status: 'SUCCESS', data: user});\n    } catch (e) {\n      setUserProfile({status: 'ERROR', data: e});\n    }\n  }, [userName]);\n  const tabs = [{name: 'OverView'}, {name: 'Repositories'}, {name: 'Projects'}]\n  return (\n    <div className=\"container container--fluid\">\n      {\n        userProfile.status === 'SUCCESS' ?\n          (\n            <div className=\"container__row\">\n              <div className=\"container__col-md-3 container__col-sm-12\">\n                <ProfileCard {...userProfile.data}/>\n              </div>\n              <div className=\"container__col-md-9 container__col-sm-12\">\n                <div className=\"u-spacer--5x\">\n                  <Tabs\n                    tabs = {tabs}\n                  />\n                  <ProjectCard/>\n                  <ProjectCard/>\n                  <ProjectCard/>\n                  <ProjectCard/>\n                  <ProjectCard/>\n                </div>\n              </div>\n            </div>\n          ) : <p>Loading....</p>\n      }\n\n    </div>\n  )\n};\n\nexport default Profile;\n","import React from 'react';\n\nconst Header = () => {\n  return (\n    <div className=\"c-header\">\n      <div className=\"c-header__logo\">GH</div>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Profile from './Profile/Profile';\nimport './Common/styles/Utilities.scss';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport './Common/styles/Grid.scss'\nimport './Common/styles/Tabs.scss';\nimport './Common/styles/Header.scss';\nimport './Profile/profile.scss';\n\nimport Header from \"./Common/Header\";\nfunction App() {\n  return (\n    <Router>\n      <Header/>\n      <Switch>\n        <Route exact path=\"/profile/:userName\"  children={<Profile />}>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}